Epoch [1/30], Loss: 0.2400
Epoch [2/30], Loss: 0.1066
Epoch [3/30], Loss: 0.0887
Epoch [4/30], Loss: 0.0903
Epoch [5/30], Loss: 0.0946
-- Evaluation after Epoch [5/30], Test Loss: 0.0197
New best test loss: 0.0197. Saving model.
Epoch [6/30], Loss: 0.0965
Epoch [7/30], Loss: 0.0936
Epoch [8/30], Loss: 0.0896
Epoch [9/30], Loss: 0.0825
Epoch [10/30], Loss: 0.0854
-- Evaluation after Epoch [10/30], Test Loss: 0.0251
Epoch [11/30], Loss: 0.0814
Epoch [12/30], Loss: 0.0793
Epoch [13/30], Loss: 0.0793
Epoch [14/30], Loss: 0.0742
Epoch [15/30], Loss: 0.0695
-- Evaluation after Epoch [15/30], Test Loss: 0.1212
Epoch [16/30], Loss: 0.0729
Epoch [17/30], Loss: 0.0691
Epoch [18/30], Loss: 0.0692
Epoch [19/30], Loss: 0.0642
Epoch [20/30], Loss: 0.0663
-- Evaluation after Epoch [20/30], Test Loss: 0.1177
Epoch [21/30], Loss: 0.0636
Epoch [22/30], Loss: 0.0599
Epoch [23/30], Loss: 0.0563
Epoch [24/30], Loss: 0.0562
Epoch [25/30], Loss: 0.0577
-- Evaluation after Epoch [25/30], Test Loss: 0.1351
Epoch [26/30], Loss: 0.0607
Epoch [27/30], Loss: 0.0578
Epoch [28/30], Loss: 0.0552
Epoch [29/30], Loss: 0.0555
Epoch [30/30], Loss: 0.0509
-- Evaluation after Epoch [30/30], Test Loss: 0.1975
Loading the best model from checkpoint with test loss: 0.0197
Validation Loss (RMSE): 0.0180
Validation results saved to: ./Results\Informer_Study_20250127_105301\Val\validation_results.txt
Avg Test Loss before reverse scaling(RMSE): 0.0197
Avg Test Loss after reverse scaling (RMSE): 18.4136
Test results saved to: ./Results\Informer_Study_20250127_105301\Test\test_results.txt
[4;33mReloaded modules[24m: Network.models, Network.utils, Network.utils.masking, Network.models.encoder, Network.models.decoder, Network.models.attn, Network.models.embed, Network.models.model, study_folder, params_informer, prepare_data_inf[0m
> [1;32mc:\users\bhargav bade\multivar lstm\train_test_informer.py[0m(4)[0;36m<module>[1;34m()[0m
[1;32m      2 [1;33m[1;31m# In[34]:[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m      3 [1;33m[1;33m[0m[0m
[0m[1;32m----> 4 [1;33m[1;32mimport[0m [0mos[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m      5 [1;33m[1;32mimport[0m [0mtorch[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m      6 [1;33m[1;32mimport[0m [0mnumpy[0m [1;32mas[0m [0mnp[0m[1;33m[0m[1;33m[0m[0m
[0m
> [1;32mc:\users\bhargav bade\multivar lstm\train_test_informer.py[0m(5)[0;36m<module>[1;34m()[0m
[1;32m      3 [1;33m[1;33m[0m[0m
[0m[1;32m      4 [1;33m[1;32mimport[0m [0mos[0m[1;33m[0m[1;33m[0m[0m
[0m[1;31m228[1;32m-> 5 [1;33m[1;32mimport[0m [0mtorch[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m      6 [1;33m[1;32mimport[0m [0mnumpy[0m [1;32mas[0m [0mnp[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m      7 [1;33m[1;32mimport[0m [0mshutil[0m[1;33m[0m[1;33m[0m[0m
[0m
240
64
./Results\Informer_Study_20250127_112945
./Results\Informer_Study_20250127_112945\Train
Config file saved to: ./Results\Informer_Study_20250127_112945\params_informer.py
./01_PM2.5 Chinese Weather data\BeijingPM20100101_20151231.csv
Range of PM values: 976.0 (Min: 4.0, Max: 980.0)
Avg of PM values: 89.91574468085106
[4;33mReloaded modules[24m: Network.models, Network.utils, Network.utils.masking, Network.models.encoder, Network.models.decoder, Network.models.attn, Network.models.embed, Network.models.model, study_folder, params_informer, prepare_data_inf[0m
> [1;32mc:\users\bhargav bade\multivar lstm\timeseriesforecast-informer\informer.py[0m(7)[0;36m<module>[1;34m()[0m
[1;32m      5 [1;33m[1;33m[0m[0m
[0m[1;32m      6 [1;33m[1;33m[0m[0m
[0m[1;32m----> 7 [1;33m[1;32mimport[0m [0mpandas[0m [1;32mas[0m [0mpd[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m      8 [1;33m[1;32mimport[0m [0mnumpy[0m [1;32mas[0m [0mnp[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m      9 [1;33m[1;32mimport[0m [0mmatplotlib[0m[1;33m.[0m[0mpyplot[0m [1;32mas[0m [0mplt[0m[1;33m[0m[1;33m[0m[0m
[0m
> [1;32mc:\users\bhargav bade\multivar lstm\timeseriesforecast-informer\informer.py[0m(20)[0;36m<module>[1;34m()[0m
[1;32m     18 [1;33m[1;32mfrom[0m [0mtqdm[0m [1;32mimport[0m [0mtqdm[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m     19 [1;33m[1;33m[0m[0m
[0m[1;31m157[1;32m> 20 [1;33m[1;32mfrom[0m [0mmodels[0m[1;33m.[0m[0mmodel[0m [1;32mimport[0m [0mInformer[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m     21 [1;33m[1;33m[0m[0m
[0m[1;32m     22 [1;33m[1;33m[0m[0m
[0m
c:\users\bhargav bade\multivar lstm\timeseriesforecast-informer\informer.py:47: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.
  dates['month'] = dates.date.apply(lambda row:row.month,1)
c:\users\bhargav bade\multivar lstm\timeseriesforecast-informer\informer.py:48: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.
  dates['day'] = dates.date.apply(lambda row:row.day,1)
c:\users\bhargav bade\multivar lstm\timeseriesforecast-informer\informer.py:49: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.
  dates['weekday'] = dates.date.apply(lambda row:row.weekday(),1)
c:\users\bhargav bade\multivar lstm\timeseriesforecast-informer\informer.py:50: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.
  dates['hour'] = dates.date.apply(lambda row:row.hour,1)
c:\users\bhargav bade\multivar lstm\timeseriesforecast-informer\informer.py:51: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.
  dates['minute'] = dates.date.apply(lambda row:row.minute,1)
  0%|          | 0/50 [03:16<?, ?it/s]
[4;33mReloaded modules[24m: models, utils, utils.masking, models.encoder, models.decoder, models.attn, models.embed, models.model[0m
> [1;32mc:\users\bhargav bade\multivar lstm\timeseriesforecast-informer\informer.py[0m(7)[0;36m<module>[1;34m()[0m
[1;32m      5 [1;33m[1;33m[0m[0m
[0m[1;32m      6 [1;33m[1;33m[0m[0m
[0m[1;32m----> 7 [1;33m[1;32mimport[0m [0mpandas[0m [1;32mas[0m [0mpd[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m      8 [1;33m[1;32mimport[0m [0mnumpy[0m [1;32mas[0m [0mnp[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m      9 [1;33m[1;32mimport[0m [0mmatplotlib[0m[1;33m.[0m[0mpyplot[0m [1;32mas[0m [0mplt[0m[1;33m[0m[1;33m[0m[0m
[0m
> [1;32mc:\users\bhargav bade\multivar lstm\timeseriesforecast-informer\informer.py[0m(20)[0;36m<module>[1;34m()[0m
[1;32m     18 [1;33m[1;32mfrom[0m [0mtqdm[0m [1;32mimport[0m [0mtqdm[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m     19 [1;33m[1;33m[0m[0m
[0m[1;31m157[1;32m> 20 [1;33m[1;32mfrom[0m [0mmodels[0m[1;33m.[0m[0mmodel[0m [1;32mimport[0m [0mInformer[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m     21 [1;33m[1;33m[0m[0m
[0m[1;32m     22 [1;33m[1;33m[0m[0m
[0m
--KeyboardInterrupt--
For copying text while debugging, use Ctrl+Shift+C
--KeyboardInterrupt--
For copying text while debugging, use Ctrl+Shift+C
--KeyboardInterrupt--
For copying text while debugging, use Ctrl+Shift+C
